
timer_interrupt_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003dc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003e0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003e0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012ba  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000054a  00000000  00000000  000212e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00021838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001520a  00000000  00000000  00021ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001dd6  00000000  00000000  00036daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b025  00000000  00000000  00038b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3ba5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000594  00000000  00000000  000b3bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080003bc 	.word	0x080003bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080003bc 	.word	0x080003bc

0800014c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0b      	blt.n	8000176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4906      	ldr	r1, [pc, #24]	; (8000180 <__NVIC_EnableIRQ+0x34>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000e100 	.word	0xe000e100

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0112      	lsls	r2, r2, #4
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0112      	lsls	r2, r2, #4
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <main>:
#include "main.h"

void GPIO_config(void);
void TIM2_config(void);

int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0



	GPIO_config();
 80001dc:	f000 f804 	bl	80001e8 <GPIO_config>
	TIM2_config();
 80001e0:	f000 f816 	bl	8000210 <TIM2_config>

  while (1){
 80001e4:	e7fe      	b.n	80001e4 <main+0xc>
	...

080001e8 <GPIO_config>:
  }


}

void GPIO_config(void){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // set enable PORTA clock bus
 80001ec:	4b06      	ldr	r3, [pc, #24]	; (8000208 <GPIO_config+0x20>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a05      	ldr	r2, [pc, #20]	; (8000208 <GPIO_config+0x20>)
 80001f2:	f043 0304 	orr.w	r3, r3, #4
 80001f6:	6193      	str	r3, [r2, #24]
	GPIOA->CRL = 0X200000; // set output PA5
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <GPIO_config+0x24>)
 80001fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80001fe:	601a      	str	r2, [r3, #0]
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	40021000 	.word	0x40021000
 800020c:	40010800 	.word	0x40010800

08000210 <TIM2_config>:

void TIM2_config(void){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN  ; //set TIM2 clock bus enable
 8000214:	4b14      	ldr	r3, [pc, #80]	; (8000268 <TIM2_config+0x58>)
 8000216:	69db      	ldr	r3, [r3, #28]
 8000218:	4a13      	ldr	r2, [pc, #76]	; (8000268 <TIM2_config+0x58>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = 8000 - 1; // 8000000/8000 = 1000Hz
 8000220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000224:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000228:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 500 - 1; // 1000Hz ---> 1ms period
 800022a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN | TIM_CR1_DIR; // set down-counter,counter enable
 8000234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023e:	f043 0311 	orr.w	r3, r3, #17
 8000242:	6013      	str	r3, [r2, #0]
	TIM2->DIER |= TIM_DIER_UIE; // set enable interrupt
 8000244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM2_IRQn,1);
 8000254:	2101      	movs	r1, #1
 8000256:	201c      	movs	r0, #28
 8000258:	f7ff ff94 	bl	8000184 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 800025c:	201c      	movs	r0, #28
 800025e:	f7ff ff75 	bl	800014c <__NVIC_EnableIRQ>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000

0800026c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0

	if(TIM2->SR & 0X01){
 8000270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000274:	691b      	ldr	r3, [r3, #16]
 8000276:	f003 0301 	and.w	r3, r3, #1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d00d      	beq.n	800029a <TIM2_IRQHandler+0x2e>

		GPIOA->ODR ^= (1 << 5);
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <TIM2_IRQHandler+0x38>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <TIM2_IRQHandler+0x38>)
 8000284:	f083 0320 	eor.w	r3, r3, #32
 8000288:	60d3      	str	r3, [r2, #12]
		TIM2->SR &= ~(1<<0);
 800028a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028e:	691b      	ldr	r3, [r3, #16]
 8000290:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000294:	f023 0301 	bic.w	r3, r3, #1
 8000298:	6113      	str	r3, [r2, #16]

	}

}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40010800 	.word	0x40010800

080002a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002ac:	e7fe      	b.n	80002ac <NMI_Handler+0x4>

080002ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ae:	b480      	push	{r7}
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002b2:	e7fe      	b.n	80002b2 <HardFault_Handler+0x4>

080002b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <MemManage_Handler+0x4>

080002ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002be:	e7fe      	b.n	80002be <BusFault_Handler+0x4>

080002c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c4:	e7fe      	b.n	80002c4 <UsageFault_Handler+0x4>

080002c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr

080002d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr

080002de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr

080002ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002ee:	f000 f82f 	bl	8000350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
	...

08000304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800032a:	f7ff ffe4 	bl	80002f6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800032e:	f000 f821 	bl	8000374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000332:	f7ff ff51 	bl	80001d8 <main>
  bx lr
 8000336:	4770      	bx	lr
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000340:	080003dc 	.word	0x080003dc
  ldr r2, =_sbss
 8000344:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000348:	20000024 	.word	0x20000024

0800034c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC1_2_IRQHandler>
	...

08000350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <HAL_IncTick+0x1c>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <HAL_IncTick+0x20>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4413      	add	r3, r2
 8000360:	4a03      	ldr	r2, [pc, #12]	; (8000370 <HAL_IncTick+0x20>)
 8000362:	6013      	str	r3, [r2, #0]
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	20000000 	.word	0x20000000
 8000370:	20000020 	.word	0x20000020

08000374 <__libc_init_array>:
 8000374:	b570      	push	{r4, r5, r6, lr}
 8000376:	2600      	movs	r6, #0
 8000378:	4d0c      	ldr	r5, [pc, #48]	; (80003ac <__libc_init_array+0x38>)
 800037a:	4c0d      	ldr	r4, [pc, #52]	; (80003b0 <__libc_init_array+0x3c>)
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	42a6      	cmp	r6, r4
 8000382:	d109      	bne.n	8000398 <__libc_init_array+0x24>
 8000384:	f000 f81a 	bl	80003bc <_init>
 8000388:	2600      	movs	r6, #0
 800038a:	4d0a      	ldr	r5, [pc, #40]	; (80003b4 <__libc_init_array+0x40>)
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <__libc_init_array+0x44>)
 800038e:	1b64      	subs	r4, r4, r5
 8000390:	10a4      	asrs	r4, r4, #2
 8000392:	42a6      	cmp	r6, r4
 8000394:	d105      	bne.n	80003a2 <__libc_init_array+0x2e>
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f855 3b04 	ldr.w	r3, [r5], #4
 800039c:	4798      	blx	r3
 800039e:	3601      	adds	r6, #1
 80003a0:	e7ee      	b.n	8000380 <__libc_init_array+0xc>
 80003a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a6:	4798      	blx	r3
 80003a8:	3601      	adds	r6, #1
 80003aa:	e7f2      	b.n	8000392 <__libc_init_array+0x1e>
 80003ac:	080003d4 	.word	0x080003d4
 80003b0:	080003d4 	.word	0x080003d4
 80003b4:	080003d4 	.word	0x080003d4
 80003b8:	080003d8 	.word	0x080003d8

080003bc <_init>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr

080003c8 <_fini>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr
